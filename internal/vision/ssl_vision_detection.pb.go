// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vision/ssl_vision_detection.proto

package vision

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SSL_DetectionBall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Confidence in [0-1] of the detection
	Confidence *float32 `protobuf:"fixed32,1,req,name=confidence" json:"confidence,omitempty"`
	Area       *uint32  `protobuf:"varint,2,opt,name=area" json:"area,omitempty"`
	// X-coordinate in [mm] in global ssl-vision coordinate system
	X *float32 `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	// Y-coordinate in [mm] in global ssl-vision coordinate system
	Y *float32 `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	// Z-coordinate in [mm] in global ssl-vision coordinate system
	// Not supported by ssl-vision, but might be set by simulators
	Z *float32 `protobuf:"fixed32,5,opt,name=z" json:"z,omitempty"`
	// X-coordinate in [pixel] in the image
	PixelX *float32 `protobuf:"fixed32,6,req,name=pixel_x,json=pixelX" json:"pixel_x,omitempty"`
	// Y-coordinate in [pixel] in the image
	PixelY        *float32 `protobuf:"fixed32,7,req,name=pixel_y,json=pixelY" json:"pixel_y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_DetectionBall) Reset() {
	*x = SSL_DetectionBall{}
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_DetectionBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_DetectionBall) ProtoMessage() {}

func (x *SSL_DetectionBall) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_DetectionBall.ProtoReflect.Descriptor instead.
func (*SSL_DetectionBall) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_detection_proto_rawDescGZIP(), []int{0}
}

func (x *SSL_DetectionBall) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *SSL_DetectionBall) GetArea() uint32 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

func (x *SSL_DetectionBall) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *SSL_DetectionBall) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *SSL_DetectionBall) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *SSL_DetectionBall) GetPixelX() float32 {
	if x != nil && x.PixelX != nil {
		return *x.PixelX
	}
	return 0
}

func (x *SSL_DetectionBall) GetPixelY() float32 {
	if x != nil && x.PixelY != nil {
		return *x.PixelY
	}
	return 0
}

type SSL_DetectionRobot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Confidence in [0-1] of the detection
	Confidence *float32 `protobuf:"fixed32,1,req,name=confidence" json:"confidence,omitempty"`
	// Id of the robot
	RobotId *uint32 `protobuf:"varint,2,opt,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	// X-coordinate in [mm] in global ssl-vision coordinate system
	X *float32 `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	// Y-coordinate in [mm] in global ssl-vision coordinate system
	Y *float32 `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	// Orientation in [rad]
	Orientation *float32 `protobuf:"fixed32,5,opt,name=orientation" json:"orientation,omitempty"`
	// X-coordinate in [pixel] in the image
	PixelX *float32 `protobuf:"fixed32,6,req,name=pixel_x,json=pixelX" json:"pixel_x,omitempty"`
	// Y-coordinate in [pixel] in the image
	PixelY *float32 `protobuf:"fixed32,7,req,name=pixel_y,json=pixelY" json:"pixel_y,omitempty"`
	// Height, as configured in ssl-vision for the respective team
	Height        *float32 `protobuf:"fixed32,8,opt,name=height" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_DetectionRobot) Reset() {
	*x = SSL_DetectionRobot{}
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_DetectionRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_DetectionRobot) ProtoMessage() {}

func (x *SSL_DetectionRobot) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_DetectionRobot.ProtoReflect.Descriptor instead.
func (*SSL_DetectionRobot) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_detection_proto_rawDescGZIP(), []int{1}
}

func (x *SSL_DetectionRobot) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *SSL_DetectionRobot) GetRobotId() uint32 {
	if x != nil && x.RobotId != nil {
		return *x.RobotId
	}
	return 0
}

func (x *SSL_DetectionRobot) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *SSL_DetectionRobot) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *SSL_DetectionRobot) GetOrientation() float32 {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return 0
}

func (x *SSL_DetectionRobot) GetPixelX() float32 {
	if x != nil && x.PixelX != nil {
		return *x.PixelX
	}
	return 0
}

func (x *SSL_DetectionRobot) GetPixelY() float32 {
	if x != nil && x.PixelY != nil {
		return *x.PixelY
	}
	return 0
}

func (x *SSL_DetectionRobot) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type SSL_DetectionFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// monotonously increasing frame number
	FrameNumber *uint32 `protobuf:"varint,1,req,name=frame_number,json=frameNumber" json:"frame_number,omitempty"`
	// Unix timestamp in [seconds] at which the image has been received by ssl-vision
	TCapture *float64 `protobuf:"fixed64,2,req,name=t_capture,json=tCapture" json:"t_capture,omitempty"`
	// Unix timestamp in [seconds] at which this message has been sent to the network
	TSent *float64 `protobuf:"fixed64,3,req,name=t_sent,json=tSent" json:"t_sent,omitempty"`
	// Camera timestamp in [seconds] as reported by the camera, if supported
	// This is not necessarily a unix timestamp
	TCaptureCamera *float64 `protobuf:"fixed64,8,opt,name=t_capture_camera,json=tCaptureCamera" json:"t_capture_camera,omitempty"`
	// Identifier of the camera
	CameraId *uint32 `protobuf:"varint,4,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	// Detected balls
	Balls []*SSL_DetectionBall `protobuf:"bytes,5,rep,name=balls" json:"balls,omitempty"`
	// Detected yellow robots
	RobotsYellow []*SSL_DetectionRobot `protobuf:"bytes,6,rep,name=robots_yellow,json=robotsYellow" json:"robots_yellow,omitempty"`
	// Detected blue robots
	RobotsBlue    []*SSL_DetectionRobot `protobuf:"bytes,7,rep,name=robots_blue,json=robotsBlue" json:"robots_blue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_DetectionFrame) Reset() {
	*x = SSL_DetectionFrame{}
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_DetectionFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_DetectionFrame) ProtoMessage() {}

func (x *SSL_DetectionFrame) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_detection_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_DetectionFrame.ProtoReflect.Descriptor instead.
func (*SSL_DetectionFrame) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_detection_proto_rawDescGZIP(), []int{2}
}

func (x *SSL_DetectionFrame) GetFrameNumber() uint32 {
	if x != nil && x.FrameNumber != nil {
		return *x.FrameNumber
	}
	return 0
}

func (x *SSL_DetectionFrame) GetTCapture() float64 {
	if x != nil && x.TCapture != nil {
		return *x.TCapture
	}
	return 0
}

func (x *SSL_DetectionFrame) GetTSent() float64 {
	if x != nil && x.TSent != nil {
		return *x.TSent
	}
	return 0
}

func (x *SSL_DetectionFrame) GetTCaptureCamera() float64 {
	if x != nil && x.TCaptureCamera != nil {
		return *x.TCaptureCamera
	}
	return 0
}

func (x *SSL_DetectionFrame) GetCameraId() uint32 {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return 0
}

func (x *SSL_DetectionFrame) GetBalls() []*SSL_DetectionBall {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *SSL_DetectionFrame) GetRobotsYellow() []*SSL_DetectionRobot {
	if x != nil {
		return x.RobotsYellow
	}
	return nil
}

func (x *SSL_DetectionFrame) GetRobotsBlue() []*SSL_DetectionRobot {
	if x != nil {
		return x.RobotsBlue
	}
	return nil
}

var File_vision_ssl_vision_detection_proto protoreflect.FileDescriptor

const file_vision_ssl_vision_detection_proto_rawDesc = "" +
	"\n" +
	"!vision/ssl_vision_detection.proto\"\xa3\x01\n" +
	"\x11SSL_DetectionBall\x12\x1e\n" +
	"\n" +
	"confidence\x18\x01 \x02(\x02R\n" +
	"confidence\x12\x12\n" +
	"\x04area\x18\x02 \x01(\rR\x04area\x12\f\n" +
	"\x01x\x18\x03 \x02(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x04 \x02(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x05 \x01(\x02R\x01z\x12\x17\n" +
	"\apixel_x\x18\x06 \x02(\x02R\x06pixelX\x12\x17\n" +
	"\apixel_y\x18\a \x02(\x02R\x06pixelY\"\xd7\x01\n" +
	"\x12SSL_DetectionRobot\x12\x1e\n" +
	"\n" +
	"confidence\x18\x01 \x02(\x02R\n" +
	"confidence\x12\x19\n" +
	"\brobot_id\x18\x02 \x01(\rR\arobotId\x12\f\n" +
	"\x01x\x18\x03 \x02(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x04 \x02(\x02R\x01y\x12 \n" +
	"\vorientation\x18\x05 \x01(\x02R\vorientation\x12\x17\n" +
	"\apixel_x\x18\x06 \x02(\x02R\x06pixelX\x12\x17\n" +
	"\apixel_y\x18\a \x02(\x02R\x06pixelY\x12\x16\n" +
	"\x06height\x18\b \x01(\x02R\x06height\"\xcc\x02\n" +
	"\x12SSL_DetectionFrame\x12!\n" +
	"\fframe_number\x18\x01 \x02(\rR\vframeNumber\x12\x1b\n" +
	"\tt_capture\x18\x02 \x02(\x01R\btCapture\x12\x15\n" +
	"\x06t_sent\x18\x03 \x02(\x01R\x05tSent\x12(\n" +
	"\x10t_capture_camera\x18\b \x01(\x01R\x0etCaptureCamera\x12\x1b\n" +
	"\tcamera_id\x18\x04 \x02(\rR\bcameraId\x12(\n" +
	"\x05balls\x18\x05 \x03(\v2\x12.SSL_DetectionBallR\x05balls\x128\n" +
	"\rrobots_yellow\x18\x06 \x03(\v2\x13.SSL_DetectionRobotR\frobotsYellow\x124\n" +
	"\vrobots_blue\x18\a \x03(\v2\x13.SSL_DetectionRobotR\n" +
	"robotsBlueBPB\x17SslVisionDetectionProtoP\x01Z3github.com/RoboCup-SSL/ssl-go-tools/internal/vision"

var (
	file_vision_ssl_vision_detection_proto_rawDescOnce sync.Once
	file_vision_ssl_vision_detection_proto_rawDescData []byte
)

func file_vision_ssl_vision_detection_proto_rawDescGZIP() []byte {
	file_vision_ssl_vision_detection_proto_rawDescOnce.Do(func() {
		file_vision_ssl_vision_detection_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vision_ssl_vision_detection_proto_rawDesc), len(file_vision_ssl_vision_detection_proto_rawDesc)))
	})
	return file_vision_ssl_vision_detection_proto_rawDescData
}

var file_vision_ssl_vision_detection_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vision_ssl_vision_detection_proto_goTypes = []any{
	(*SSL_DetectionBall)(nil),  // 0: SSL_DetectionBall
	(*SSL_DetectionRobot)(nil), // 1: SSL_DetectionRobot
	(*SSL_DetectionFrame)(nil), // 2: SSL_DetectionFrame
}
var file_vision_ssl_vision_detection_proto_depIdxs = []int32{
	0, // 0: SSL_DetectionFrame.balls:type_name -> SSL_DetectionBall
	1, // 1: SSL_DetectionFrame.robots_yellow:type_name -> SSL_DetectionRobot
	1, // 2: SSL_DetectionFrame.robots_blue:type_name -> SSL_DetectionRobot
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_vision_ssl_vision_detection_proto_init() }
func file_vision_ssl_vision_detection_proto_init() {
	if File_vision_ssl_vision_detection_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vision_ssl_vision_detection_proto_rawDesc), len(file_vision_ssl_vision_detection_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vision_ssl_vision_detection_proto_goTypes,
		DependencyIndexes: file_vision_ssl_vision_detection_proto_depIdxs,
		MessageInfos:      file_vision_ssl_vision_detection_proto_msgTypes,
	}.Build()
	File_vision_ssl_vision_detection_proto = out.File
	file_vision_ssl_vision_detection_proto_goTypes = nil
	file_vision_ssl_vision_detection_proto_depIdxs = nil
}
