// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vision/ssl_vision_geometry.proto

package vision

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SSL_FieldShapeType int32

const (
	SSL_FieldShapeType_Undefined                     SSL_FieldShapeType = 0
	SSL_FieldShapeType_CenterCircle                  SSL_FieldShapeType = 1
	SSL_FieldShapeType_TopTouchLine                  SSL_FieldShapeType = 2
	SSL_FieldShapeType_BottomTouchLine               SSL_FieldShapeType = 3
	SSL_FieldShapeType_LeftGoalLine                  SSL_FieldShapeType = 4
	SSL_FieldShapeType_RightGoalLine                 SSL_FieldShapeType = 5
	SSL_FieldShapeType_HalfwayLine                   SSL_FieldShapeType = 6
	SSL_FieldShapeType_CenterLine                    SSL_FieldShapeType = 7
	SSL_FieldShapeType_LeftPenaltyStretch            SSL_FieldShapeType = 8
	SSL_FieldShapeType_RightPenaltyStretch           SSL_FieldShapeType = 9
	SSL_FieldShapeType_LeftFieldLeftPenaltyStretch   SSL_FieldShapeType = 10
	SSL_FieldShapeType_LeftFieldRightPenaltyStretch  SSL_FieldShapeType = 11
	SSL_FieldShapeType_RightFieldLeftPenaltyStretch  SSL_FieldShapeType = 12
	SSL_FieldShapeType_RightFieldRightPenaltyStretch SSL_FieldShapeType = 13
)

// Enum value maps for SSL_FieldShapeType.
var (
	SSL_FieldShapeType_name = map[int32]string{
		0:  "Undefined",
		1:  "CenterCircle",
		2:  "TopTouchLine",
		3:  "BottomTouchLine",
		4:  "LeftGoalLine",
		5:  "RightGoalLine",
		6:  "HalfwayLine",
		7:  "CenterLine",
		8:  "LeftPenaltyStretch",
		9:  "RightPenaltyStretch",
		10: "LeftFieldLeftPenaltyStretch",
		11: "LeftFieldRightPenaltyStretch",
		12: "RightFieldLeftPenaltyStretch",
		13: "RightFieldRightPenaltyStretch",
	}
	SSL_FieldShapeType_value = map[string]int32{
		"Undefined":                     0,
		"CenterCircle":                  1,
		"TopTouchLine":                  2,
		"BottomTouchLine":               3,
		"LeftGoalLine":                  4,
		"RightGoalLine":                 5,
		"HalfwayLine":                   6,
		"CenterLine":                    7,
		"LeftPenaltyStretch":            8,
		"RightPenaltyStretch":           9,
		"LeftFieldLeftPenaltyStretch":   10,
		"LeftFieldRightPenaltyStretch":  11,
		"RightFieldLeftPenaltyStretch":  12,
		"RightFieldRightPenaltyStretch": 13,
	}
)

func (x SSL_FieldShapeType) Enum() *SSL_FieldShapeType {
	p := new(SSL_FieldShapeType)
	*p = x
	return p
}

func (x SSL_FieldShapeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSL_FieldShapeType) Descriptor() protoreflect.EnumDescriptor {
	return file_vision_ssl_vision_geometry_proto_enumTypes[0].Descriptor()
}

func (SSL_FieldShapeType) Type() protoreflect.EnumType {
	return &file_vision_ssl_vision_geometry_proto_enumTypes[0]
}

func (x SSL_FieldShapeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SSL_FieldShapeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SSL_FieldShapeType(num)
	return nil
}

// Deprecated: Use SSL_FieldShapeType.Descriptor instead.
func (SSL_FieldShapeType) EnumDescriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{0}
}

// A 2D float vector.
type Vector2F struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector2F) Reset() {
	*x = Vector2F{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector2F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2F) ProtoMessage() {}

func (x *Vector2F) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2F.ProtoReflect.Descriptor instead.
func (*Vector2F) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{0}
}

func (x *Vector2F) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector2F) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

// Represents a field marking as a line segment represented by a start point p1,
// and end point p2, and a line thickness. The start and end points are along
// the center of the line, so the thickness of the line extends by thickness / 2
// on either side of the line.
type SSL_FieldLineSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Start point of the line segment.
	P1 *Vector2F `protobuf:"bytes,2,req,name=p1" json:"p1,omitempty"`
	// End point of the line segment.
	P2 *Vector2F `protobuf:"bytes,3,req,name=p2" json:"p2,omitempty"`
	// Thickness of the line segment.
	Thickness *float32 `protobuf:"fixed32,4,req,name=thickness" json:"thickness,omitempty"`
	// The type of this shape
	Type          *SSL_FieldShapeType `protobuf:"varint,5,opt,name=type,enum=SSL_FieldShapeType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_FieldLineSegment) Reset() {
	*x = SSL_FieldLineSegment{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_FieldLineSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_FieldLineSegment) ProtoMessage() {}

func (x *SSL_FieldLineSegment) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_FieldLineSegment.ProtoReflect.Descriptor instead.
func (*SSL_FieldLineSegment) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{1}
}

func (x *SSL_FieldLineSegment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SSL_FieldLineSegment) GetP1() *Vector2F {
	if x != nil {
		return x.P1
	}
	return nil
}

func (x *SSL_FieldLineSegment) GetP2() *Vector2F {
	if x != nil {
		return x.P2
	}
	return nil
}

func (x *SSL_FieldLineSegment) GetThickness() float32 {
	if x != nil && x.Thickness != nil {
		return *x.Thickness
	}
	return 0
}

func (x *SSL_FieldLineSegment) GetType() SSL_FieldShapeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SSL_FieldShapeType_Undefined
}

// Represents a field marking as a circular arc segment represented by center point, a
// start angle, an end angle, and an arc thickness.
type SSL_FieldCircularArc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Center point of the circular arc.
	Center *Vector2F `protobuf:"bytes,2,req,name=center" json:"center,omitempty"`
	// Radius of the arc.
	Radius *float32 `protobuf:"fixed32,3,req,name=radius" json:"radius,omitempty"`
	// Start angle in counter-clockwise order.
	A1 *float32 `protobuf:"fixed32,4,req,name=a1" json:"a1,omitempty"`
	// End angle in counter-clockwise order.
	A2 *float32 `protobuf:"fixed32,5,req,name=a2" json:"a2,omitempty"`
	// Thickness of the arc.
	Thickness *float32 `protobuf:"fixed32,6,req,name=thickness" json:"thickness,omitempty"`
	// The type of this shape
	Type          *SSL_FieldShapeType `protobuf:"varint,7,opt,name=type,enum=SSL_FieldShapeType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_FieldCircularArc) Reset() {
	*x = SSL_FieldCircularArc{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_FieldCircularArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_FieldCircularArc) ProtoMessage() {}

func (x *SSL_FieldCircularArc) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_FieldCircularArc.ProtoReflect.Descriptor instead.
func (*SSL_FieldCircularArc) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{2}
}

func (x *SSL_FieldCircularArc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SSL_FieldCircularArc) GetCenter() *Vector2F {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SSL_FieldCircularArc) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *SSL_FieldCircularArc) GetA1() float32 {
	if x != nil && x.A1 != nil {
		return *x.A1
	}
	return 0
}

func (x *SSL_FieldCircularArc) GetA2() float32 {
	if x != nil && x.A2 != nil {
		return *x.A2
	}
	return 0
}

func (x *SSL_FieldCircularArc) GetThickness() float32 {
	if x != nil && x.Thickness != nil {
		return *x.Thickness
	}
	return 0
}

func (x *SSL_FieldCircularArc) GetType() SSL_FieldShapeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SSL_FieldShapeType_Undefined
}

type SSL_GeometryFieldSize struct {
	state                   protoimpl.MessageState  `protogen:"open.v1"`
	FieldLength             *int32                  `protobuf:"varint,1,req,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	FieldWidth              *int32                  `protobuf:"varint,2,req,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	GoalWidth               *int32                  `protobuf:"varint,3,req,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	GoalDepth               *int32                  `protobuf:"varint,4,req,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	BoundaryWidth           *int32                  `protobuf:"varint,5,req,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	FieldLines              []*SSL_FieldLineSegment `protobuf:"bytes,6,rep,name=field_lines,json=fieldLines" json:"field_lines,omitempty"`
	FieldArcs               []*SSL_FieldCircularArc `protobuf:"bytes,7,rep,name=field_arcs,json=fieldArcs" json:"field_arcs,omitempty"`
	PenaltyAreaDepth        *int32                  `protobuf:"varint,8,opt,name=penalty_area_depth,json=penaltyAreaDepth" json:"penalty_area_depth,omitempty"`
	PenaltyAreaWidth        *int32                  `protobuf:"varint,9,opt,name=penalty_area_width,json=penaltyAreaWidth" json:"penalty_area_width,omitempty"`
	CenterCircleRadius      *int32                  `protobuf:"varint,10,opt,name=center_circle_radius,json=centerCircleRadius" json:"center_circle_radius,omitempty"`
	LineThickness           *int32                  `protobuf:"varint,11,opt,name=line_thickness,json=lineThickness" json:"line_thickness,omitempty"`
	GoalCenterToPenaltyMark *int32                  `protobuf:"varint,12,opt,name=goal_center_to_penalty_mark,json=goalCenterToPenaltyMark" json:"goal_center_to_penalty_mark,omitempty"`
	GoalHeight              *int32                  `protobuf:"varint,13,opt,name=goal_height,json=goalHeight" json:"goal_height,omitempty"`
	BallRadius              *float32                `protobuf:"fixed32,14,opt,name=ball_radius,json=ballRadius" json:"ball_radius,omitempty"`
	MaxRobotRadius          *float32                `protobuf:"fixed32,15,opt,name=max_robot_radius,json=maxRobotRadius" json:"max_robot_radius,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SSL_GeometryFieldSize) Reset() {
	*x = SSL_GeometryFieldSize{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_GeometryFieldSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryFieldSize) ProtoMessage() {}

func (x *SSL_GeometryFieldSize) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryFieldSize.ProtoReflect.Descriptor instead.
func (*SSL_GeometryFieldSize) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{3}
}

func (x *SSL_GeometryFieldSize) GetFieldLength() int32 {
	if x != nil && x.FieldLength != nil {
		return *x.FieldLength
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetFieldWidth() int32 {
	if x != nil && x.FieldWidth != nil {
		return *x.FieldWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalWidth() int32 {
	if x != nil && x.GoalWidth != nil {
		return *x.GoalWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalDepth() int32 {
	if x != nil && x.GoalDepth != nil {
		return *x.GoalDepth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetBoundaryWidth() int32 {
	if x != nil && x.BoundaryWidth != nil {
		return *x.BoundaryWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetFieldLines() []*SSL_FieldLineSegment {
	if x != nil {
		return x.FieldLines
	}
	return nil
}

func (x *SSL_GeometryFieldSize) GetFieldArcs() []*SSL_FieldCircularArc {
	if x != nil {
		return x.FieldArcs
	}
	return nil
}

func (x *SSL_GeometryFieldSize) GetPenaltyAreaDepth() int32 {
	if x != nil && x.PenaltyAreaDepth != nil {
		return *x.PenaltyAreaDepth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetPenaltyAreaWidth() int32 {
	if x != nil && x.PenaltyAreaWidth != nil {
		return *x.PenaltyAreaWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetCenterCircleRadius() int32 {
	if x != nil && x.CenterCircleRadius != nil {
		return *x.CenterCircleRadius
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetLineThickness() int32 {
	if x != nil && x.LineThickness != nil {
		return *x.LineThickness
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalCenterToPenaltyMark() int32 {
	if x != nil && x.GoalCenterToPenaltyMark != nil {
		return *x.GoalCenterToPenaltyMark
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalHeight() int32 {
	if x != nil && x.GoalHeight != nil {
		return *x.GoalHeight
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetBallRadius() float32 {
	if x != nil && x.BallRadius != nil {
		return *x.BallRadius
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetMaxRobotRadius() float32 {
	if x != nil && x.MaxRobotRadius != nil {
		return *x.MaxRobotRadius
	}
	return 0
}

type SSL_GeometryCameraCalibration struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CameraId             *uint32                `protobuf:"varint,1,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	FocalLength          *float32               `protobuf:"fixed32,2,req,name=focal_length,json=focalLength" json:"focal_length,omitempty"`
	PrincipalPointX      *float32               `protobuf:"fixed32,3,req,name=principal_point_x,json=principalPointX" json:"principal_point_x,omitempty"`
	PrincipalPointY      *float32               `protobuf:"fixed32,4,req,name=principal_point_y,json=principalPointY" json:"principal_point_y,omitempty"`
	Distortion           *float32               `protobuf:"fixed32,5,req,name=distortion" json:"distortion,omitempty"`
	Q0                   *float32               `protobuf:"fixed32,6,req,name=q0" json:"q0,omitempty"`
	Q1                   *float32               `protobuf:"fixed32,7,req,name=q1" json:"q1,omitempty"`
	Q2                   *float32               `protobuf:"fixed32,8,req,name=q2" json:"q2,omitempty"`
	Q3                   *float32               `protobuf:"fixed32,9,req,name=q3" json:"q3,omitempty"`
	Tx                   *float32               `protobuf:"fixed32,10,req,name=tx" json:"tx,omitempty"`
	Ty                   *float32               `protobuf:"fixed32,11,req,name=ty" json:"ty,omitempty"`
	Tz                   *float32               `protobuf:"fixed32,12,req,name=tz" json:"tz,omitempty"`
	DerivedCameraWorldTx *float32               `protobuf:"fixed32,13,opt,name=derived_camera_world_tx,json=derivedCameraWorldTx" json:"derived_camera_world_tx,omitempty"`
	DerivedCameraWorldTy *float32               `protobuf:"fixed32,14,opt,name=derived_camera_world_ty,json=derivedCameraWorldTy" json:"derived_camera_world_ty,omitempty"`
	DerivedCameraWorldTz *float32               `protobuf:"fixed32,15,opt,name=derived_camera_world_tz,json=derivedCameraWorldTz" json:"derived_camera_world_tz,omitempty"`
	PixelImageWidth      *uint32                `protobuf:"varint,16,opt,name=pixel_image_width,json=pixelImageWidth" json:"pixel_image_width,omitempty"`
	PixelImageHeight     *uint32                `protobuf:"varint,17,opt,name=pixel_image_height,json=pixelImageHeight" json:"pixel_image_height,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SSL_GeometryCameraCalibration) Reset() {
	*x = SSL_GeometryCameraCalibration{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_GeometryCameraCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryCameraCalibration) ProtoMessage() {}

func (x *SSL_GeometryCameraCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryCameraCalibration.ProtoReflect.Descriptor instead.
func (*SSL_GeometryCameraCalibration) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{4}
}

func (x *SSL_GeometryCameraCalibration) GetCameraId() uint32 {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetFocalLength() float32 {
	if x != nil && x.FocalLength != nil {
		return *x.FocalLength
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPrincipalPointX() float32 {
	if x != nil && x.PrincipalPointX != nil {
		return *x.PrincipalPointX
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPrincipalPointY() float32 {
	if x != nil && x.PrincipalPointY != nil {
		return *x.PrincipalPointY
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDistortion() float32 {
	if x != nil && x.Distortion != nil {
		return *x.Distortion
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ0() float32 {
	if x != nil && x.Q0 != nil {
		return *x.Q0
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ1() float32 {
	if x != nil && x.Q1 != nil {
		return *x.Q1
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ2() float32 {
	if x != nil && x.Q2 != nil {
		return *x.Q2
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ3() float32 {
	if x != nil && x.Q3 != nil {
		return *x.Q3
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTx() float32 {
	if x != nil && x.Tx != nil {
		return *x.Tx
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTy() float32 {
	if x != nil && x.Ty != nil {
		return *x.Ty
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTz() float32 {
	if x != nil && x.Tz != nil {
		return *x.Tz
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTx() float32 {
	if x != nil && x.DerivedCameraWorldTx != nil {
		return *x.DerivedCameraWorldTx
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTy() float32 {
	if x != nil && x.DerivedCameraWorldTy != nil {
		return *x.DerivedCameraWorldTy
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTz() float32 {
	if x != nil && x.DerivedCameraWorldTz != nil {
		return *x.DerivedCameraWorldTz
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPixelImageWidth() uint32 {
	if x != nil && x.PixelImageWidth != nil {
		return *x.PixelImageWidth
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPixelImageHeight() uint32 {
	if x != nil && x.PixelImageHeight != nil {
		return *x.PixelImageHeight
	}
	return 0
}

// Two-Phase model for straight-kicked balls.
// There are two phases with different accelerations during the ball kicks:
// 1. Sliding
// 2. Rolling
// The full model is described in the TDP of ER-Force from 2016, which can be found here:
// https://ssl.robocup.org/wp-content/uploads/2019/01/2016_ETDP_ER-Force.pdf
type SSL_BallModelStraightTwoPhase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ball sliding acceleration [m/s^2] (should be negative)
	AccSlide *float64 `protobuf:"fixed64,1,req,name=acc_slide,json=accSlide" json:"acc_slide,omitempty"`
	// Ball rolling acceleration [m/s^2] (should be negative)
	AccRoll *float64 `protobuf:"fixed64,2,req,name=acc_roll,json=accRoll" json:"acc_roll,omitempty"`
	// Fraction of the initial velocity where the ball starts to roll
	KSwitch       *float64 `protobuf:"fixed64,3,req,name=k_switch,json=kSwitch" json:"k_switch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_BallModelStraightTwoPhase) Reset() {
	*x = SSL_BallModelStraightTwoPhase{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_BallModelStraightTwoPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_BallModelStraightTwoPhase) ProtoMessage() {}

func (x *SSL_BallModelStraightTwoPhase) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_BallModelStraightTwoPhase.ProtoReflect.Descriptor instead.
func (*SSL_BallModelStraightTwoPhase) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{5}
}

func (x *SSL_BallModelStraightTwoPhase) GetAccSlide() float64 {
	if x != nil && x.AccSlide != nil {
		return *x.AccSlide
	}
	return 0
}

func (x *SSL_BallModelStraightTwoPhase) GetAccRoll() float64 {
	if x != nil && x.AccRoll != nil {
		return *x.AccRoll
	}
	return 0
}

func (x *SSL_BallModelStraightTwoPhase) GetKSwitch() float64 {
	if x != nil && x.KSwitch != nil {
		return *x.KSwitch
	}
	return 0
}

// Fixed-Loss model for chipped balls.
// Uses fixed damping factors for xy and z direction per hop.
type SSL_BallModelChipFixedLoss struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Chip kick velocity damping factor in XY direction for the first hop
	DampingXyFirstHop *float64 `protobuf:"fixed64,1,req,name=damping_xy_first_hop,json=dampingXyFirstHop" json:"damping_xy_first_hop,omitempty"`
	// Chip kick velocity damping factor in XY direction for all following hops
	DampingXyOtherHops *float64 `protobuf:"fixed64,2,req,name=damping_xy_other_hops,json=dampingXyOtherHops" json:"damping_xy_other_hops,omitempty"`
	// Chip kick velocity damping factor in Z direction for all hops
	DampingZ      *float64 `protobuf:"fixed64,3,req,name=damping_z,json=dampingZ" json:"damping_z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_BallModelChipFixedLoss) Reset() {
	*x = SSL_BallModelChipFixedLoss{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_BallModelChipFixedLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_BallModelChipFixedLoss) ProtoMessage() {}

func (x *SSL_BallModelChipFixedLoss) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_BallModelChipFixedLoss.ProtoReflect.Descriptor instead.
func (*SSL_BallModelChipFixedLoss) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{6}
}

func (x *SSL_BallModelChipFixedLoss) GetDampingXyFirstHop() float64 {
	if x != nil && x.DampingXyFirstHop != nil {
		return *x.DampingXyFirstHop
	}
	return 0
}

func (x *SSL_BallModelChipFixedLoss) GetDampingXyOtherHops() float64 {
	if x != nil && x.DampingXyOtherHops != nil {
		return *x.DampingXyOtherHops
	}
	return 0
}

func (x *SSL_BallModelChipFixedLoss) GetDampingZ() float64 {
	if x != nil && x.DampingZ != nil {
		return *x.DampingZ
	}
	return 0
}

type SSL_GeometryModels struct {
	state            protoimpl.MessageState         `protogen:"open.v1"`
	StraightTwoPhase *SSL_BallModelStraightTwoPhase `protobuf:"bytes,1,opt,name=straight_two_phase,json=straightTwoPhase" json:"straight_two_phase,omitempty"`
	ChipFixedLoss    *SSL_BallModelChipFixedLoss    `protobuf:"bytes,2,opt,name=chip_fixed_loss,json=chipFixedLoss" json:"chip_fixed_loss,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SSL_GeometryModels) Reset() {
	*x = SSL_GeometryModels{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_GeometryModels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryModels) ProtoMessage() {}

func (x *SSL_GeometryModels) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryModels.ProtoReflect.Descriptor instead.
func (*SSL_GeometryModels) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{7}
}

func (x *SSL_GeometryModels) GetStraightTwoPhase() *SSL_BallModelStraightTwoPhase {
	if x != nil {
		return x.StraightTwoPhase
	}
	return nil
}

func (x *SSL_GeometryModels) GetChipFixedLoss() *SSL_BallModelChipFixedLoss {
	if x != nil {
		return x.ChipFixedLoss
	}
	return nil
}

type SSL_GeometryData struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Field         *SSL_GeometryFieldSize           `protobuf:"bytes,1,req,name=field" json:"field,omitempty"`
	Calib         []*SSL_GeometryCameraCalibration `protobuf:"bytes,2,rep,name=calib" json:"calib,omitempty"`
	Models        *SSL_GeometryModels              `protobuf:"bytes,3,opt,name=models" json:"models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSL_GeometryData) Reset() {
	*x = SSL_GeometryData{}
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSL_GeometryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryData) ProtoMessage() {}

func (x *SSL_GeometryData) ProtoReflect() protoreflect.Message {
	mi := &file_vision_ssl_vision_geometry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryData.ProtoReflect.Descriptor instead.
func (*SSL_GeometryData) Descriptor() ([]byte, []int) {
	return file_vision_ssl_vision_geometry_proto_rawDescGZIP(), []int{8}
}

func (x *SSL_GeometryData) GetField() *SSL_GeometryFieldSize {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SSL_GeometryData) GetCalib() []*SSL_GeometryCameraCalibration {
	if x != nil {
		return x.Calib
	}
	return nil
}

func (x *SSL_GeometryData) GetModels() *SSL_GeometryModels {
	if x != nil {
		return x.Models
	}
	return nil
}

var File_vision_ssl_vision_geometry_proto protoreflect.FileDescriptor

const file_vision_ssl_vision_geometry_proto_rawDesc = "" +
	"\n" +
	" vision/ssl_vision_geometry.proto\"&\n" +
	"\bVector2f\x12\f\n" +
	"\x01x\x18\x01 \x02(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x02(\x02R\x01y\"\xa7\x01\n" +
	"\x14SSL_FieldLineSegment\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12\x19\n" +
	"\x02p1\x18\x02 \x02(\v2\t.Vector2fR\x02p1\x12\x19\n" +
	"\x02p2\x18\x03 \x02(\v2\t.Vector2fR\x02p2\x12\x1c\n" +
	"\tthickness\x18\x04 \x02(\x02R\tthickness\x12'\n" +
	"\x04type\x18\x05 \x01(\x0e2\x13.SSL_FieldShapeTypeR\x04type\"\xcc\x01\n" +
	"\x14SSL_FieldCircularArc\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12!\n" +
	"\x06center\x18\x02 \x02(\v2\t.Vector2fR\x06center\x12\x16\n" +
	"\x06radius\x18\x03 \x02(\x02R\x06radius\x12\x0e\n" +
	"\x02a1\x18\x04 \x02(\x02R\x02a1\x12\x0e\n" +
	"\x02a2\x18\x05 \x02(\x02R\x02a2\x12\x1c\n" +
	"\tthickness\x18\x06 \x02(\x02R\tthickness\x12'\n" +
	"\x04type\x18\a \x01(\x0e2\x13.SSL_FieldShapeTypeR\x04type\"\x8d\x05\n" +
	"\x15SSL_GeometryFieldSize\x12!\n" +
	"\ffield_length\x18\x01 \x02(\x05R\vfieldLength\x12\x1f\n" +
	"\vfield_width\x18\x02 \x02(\x05R\n" +
	"fieldWidth\x12\x1d\n" +
	"\n" +
	"goal_width\x18\x03 \x02(\x05R\tgoalWidth\x12\x1d\n" +
	"\n" +
	"goal_depth\x18\x04 \x02(\x05R\tgoalDepth\x12%\n" +
	"\x0eboundary_width\x18\x05 \x02(\x05R\rboundaryWidth\x126\n" +
	"\vfield_lines\x18\x06 \x03(\v2\x15.SSL_FieldLineSegmentR\n" +
	"fieldLines\x124\n" +
	"\n" +
	"field_arcs\x18\a \x03(\v2\x15.SSL_FieldCircularArcR\tfieldArcs\x12,\n" +
	"\x12penalty_area_depth\x18\b \x01(\x05R\x10penaltyAreaDepth\x12,\n" +
	"\x12penalty_area_width\x18\t \x01(\x05R\x10penaltyAreaWidth\x120\n" +
	"\x14center_circle_radius\x18\n" +
	" \x01(\x05R\x12centerCircleRadius\x12%\n" +
	"\x0eline_thickness\x18\v \x01(\x05R\rlineThickness\x12<\n" +
	"\x1bgoal_center_to_penalty_mark\x18\f \x01(\x05R\x17goalCenterToPenaltyMark\x12\x1f\n" +
	"\vgoal_height\x18\r \x01(\x05R\n" +
	"goalHeight\x12\x1f\n" +
	"\vball_radius\x18\x0e \x01(\x02R\n" +
	"ballRadius\x12(\n" +
	"\x10max_robot_radius\x18\x0f \x01(\x02R\x0emaxRobotRadius\"\xc6\x04\n" +
	"\x1dSSL_GeometryCameraCalibration\x12\x1b\n" +
	"\tcamera_id\x18\x01 \x02(\rR\bcameraId\x12!\n" +
	"\ffocal_length\x18\x02 \x02(\x02R\vfocalLength\x12*\n" +
	"\x11principal_point_x\x18\x03 \x02(\x02R\x0fprincipalPointX\x12*\n" +
	"\x11principal_point_y\x18\x04 \x02(\x02R\x0fprincipalPointY\x12\x1e\n" +
	"\n" +
	"distortion\x18\x05 \x02(\x02R\n" +
	"distortion\x12\x0e\n" +
	"\x02q0\x18\x06 \x02(\x02R\x02q0\x12\x0e\n" +
	"\x02q1\x18\a \x02(\x02R\x02q1\x12\x0e\n" +
	"\x02q2\x18\b \x02(\x02R\x02q2\x12\x0e\n" +
	"\x02q3\x18\t \x02(\x02R\x02q3\x12\x0e\n" +
	"\x02tx\x18\n" +
	" \x02(\x02R\x02tx\x12\x0e\n" +
	"\x02ty\x18\v \x02(\x02R\x02ty\x12\x0e\n" +
	"\x02tz\x18\f \x02(\x02R\x02tz\x125\n" +
	"\x17derived_camera_world_tx\x18\r \x01(\x02R\x14derivedCameraWorldTx\x125\n" +
	"\x17derived_camera_world_ty\x18\x0e \x01(\x02R\x14derivedCameraWorldTy\x125\n" +
	"\x17derived_camera_world_tz\x18\x0f \x01(\x02R\x14derivedCameraWorldTz\x12*\n" +
	"\x11pixel_image_width\x18\x10 \x01(\rR\x0fpixelImageWidth\x12,\n" +
	"\x12pixel_image_height\x18\x11 \x01(\rR\x10pixelImageHeight\"r\n" +
	"\x1dSSL_BallModelStraightTwoPhase\x12\x1b\n" +
	"\tacc_slide\x18\x01 \x02(\x01R\baccSlide\x12\x19\n" +
	"\bacc_roll\x18\x02 \x02(\x01R\aaccRoll\x12\x19\n" +
	"\bk_switch\x18\x03 \x02(\x01R\akSwitch\"\x9d\x01\n" +
	"\x1aSSL_BallModelChipFixedLoss\x12/\n" +
	"\x14damping_xy_first_hop\x18\x01 \x02(\x01R\x11dampingXyFirstHop\x121\n" +
	"\x15damping_xy_other_hops\x18\x02 \x02(\x01R\x12dampingXyOtherHops\x12\x1b\n" +
	"\tdamping_z\x18\x03 \x02(\x01R\bdampingZ\"\xa7\x01\n" +
	"\x12SSL_GeometryModels\x12L\n" +
	"\x12straight_two_phase\x18\x01 \x01(\v2\x1e.SSL_BallModelStraightTwoPhaseR\x10straightTwoPhase\x12C\n" +
	"\x0fchip_fixed_loss\x18\x02 \x01(\v2\x1b.SSL_BallModelChipFixedLossR\rchipFixedLoss\"\xa3\x01\n" +
	"\x10SSL_GeometryData\x12,\n" +
	"\x05field\x18\x01 \x02(\v2\x16.SSL_GeometryFieldSizeR\x05field\x124\n" +
	"\x05calib\x18\x02 \x03(\v2\x1e.SSL_GeometryCameraCalibrationR\x05calib\x12+\n" +
	"\x06models\x18\x03 \x01(\v2\x13.SSL_GeometryModelsR\x06models*\xdb\x02\n" +
	"\x12SSL_FieldShapeType\x12\r\n" +
	"\tUndefined\x10\x00\x12\x10\n" +
	"\fCenterCircle\x10\x01\x12\x10\n" +
	"\fTopTouchLine\x10\x02\x12\x13\n" +
	"\x0fBottomTouchLine\x10\x03\x12\x10\n" +
	"\fLeftGoalLine\x10\x04\x12\x11\n" +
	"\rRightGoalLine\x10\x05\x12\x0f\n" +
	"\vHalfwayLine\x10\x06\x12\x0e\n" +
	"\n" +
	"CenterLine\x10\a\x12\x16\n" +
	"\x12LeftPenaltyStretch\x10\b\x12\x17\n" +
	"\x13RightPenaltyStretch\x10\t\x12\x1f\n" +
	"\x1bLeftFieldLeftPenaltyStretch\x10\n" +
	"\x12 \n" +
	"\x1cLeftFieldRightPenaltyStretch\x10\v\x12 \n" +
	"\x1cRightFieldLeftPenaltyStretch\x10\f\x12!\n" +
	"\x1dRightFieldRightPenaltyStretch\x10\rBOB\x16SslVisionGeometryProtoP\x01Z3github.com/RoboCup-SSL/ssl-go-tools/internal/vision"

var (
	file_vision_ssl_vision_geometry_proto_rawDescOnce sync.Once
	file_vision_ssl_vision_geometry_proto_rawDescData []byte
)

func file_vision_ssl_vision_geometry_proto_rawDescGZIP() []byte {
	file_vision_ssl_vision_geometry_proto_rawDescOnce.Do(func() {
		file_vision_ssl_vision_geometry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vision_ssl_vision_geometry_proto_rawDesc), len(file_vision_ssl_vision_geometry_proto_rawDesc)))
	})
	return file_vision_ssl_vision_geometry_proto_rawDescData
}

var file_vision_ssl_vision_geometry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vision_ssl_vision_geometry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_vision_ssl_vision_geometry_proto_goTypes = []any{
	(SSL_FieldShapeType)(0),               // 0: SSL_FieldShapeType
	(*Vector2F)(nil),                      // 1: Vector2f
	(*SSL_FieldLineSegment)(nil),          // 2: SSL_FieldLineSegment
	(*SSL_FieldCircularArc)(nil),          // 3: SSL_FieldCircularArc
	(*SSL_GeometryFieldSize)(nil),         // 4: SSL_GeometryFieldSize
	(*SSL_GeometryCameraCalibration)(nil), // 5: SSL_GeometryCameraCalibration
	(*SSL_BallModelStraightTwoPhase)(nil), // 6: SSL_BallModelStraightTwoPhase
	(*SSL_BallModelChipFixedLoss)(nil),    // 7: SSL_BallModelChipFixedLoss
	(*SSL_GeometryModels)(nil),            // 8: SSL_GeometryModels
	(*SSL_GeometryData)(nil),              // 9: SSL_GeometryData
}
var file_vision_ssl_vision_geometry_proto_depIdxs = []int32{
	1,  // 0: SSL_FieldLineSegment.p1:type_name -> Vector2f
	1,  // 1: SSL_FieldLineSegment.p2:type_name -> Vector2f
	0,  // 2: SSL_FieldLineSegment.type:type_name -> SSL_FieldShapeType
	1,  // 3: SSL_FieldCircularArc.center:type_name -> Vector2f
	0,  // 4: SSL_FieldCircularArc.type:type_name -> SSL_FieldShapeType
	2,  // 5: SSL_GeometryFieldSize.field_lines:type_name -> SSL_FieldLineSegment
	3,  // 6: SSL_GeometryFieldSize.field_arcs:type_name -> SSL_FieldCircularArc
	6,  // 7: SSL_GeometryModels.straight_two_phase:type_name -> SSL_BallModelStraightTwoPhase
	7,  // 8: SSL_GeometryModels.chip_fixed_loss:type_name -> SSL_BallModelChipFixedLoss
	4,  // 9: SSL_GeometryData.field:type_name -> SSL_GeometryFieldSize
	5,  // 10: SSL_GeometryData.calib:type_name -> SSL_GeometryCameraCalibration
	8,  // 11: SSL_GeometryData.models:type_name -> SSL_GeometryModels
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_vision_ssl_vision_geometry_proto_init() }
func file_vision_ssl_vision_geometry_proto_init() {
	if File_vision_ssl_vision_geometry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vision_ssl_vision_geometry_proto_rawDesc), len(file_vision_ssl_vision_geometry_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vision_ssl_vision_geometry_proto_goTypes,
		DependencyIndexes: file_vision_ssl_vision_geometry_proto_depIdxs,
		EnumInfos:         file_vision_ssl_vision_geometry_proto_enumTypes,
		MessageInfos:      file_vision_ssl_vision_geometry_proto_msgTypes,
	}.Build()
	File_vision_ssl_vision_geometry_proto = out.File
	file_vision_ssl_vision_geometry_proto_goTypes = nil
	file_vision_ssl_vision_geometry_proto_depIdxs = nil
}
