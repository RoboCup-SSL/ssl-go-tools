// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tracked/ssl_vision_wrapper_tracked.proto

package tracked

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A wrapper packet containing meta data of the source
// Also serves for the possibility to extend the protocol later
type TrackerWrapperPacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A random UUID of the source that is kept constant at the source while running
	// If multiple sources are broadcasting to the same network, this id can be used to identify individual sources
	Uuid *string `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	// The name of the source software that is producing this messages.
	SourceName *string `protobuf:"bytes,2,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	// The tracked frame
	TrackedFrame  *TrackedFrame `protobuf:"bytes,3,opt,name=tracked_frame,json=trackedFrame" json:"tracked_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackerWrapperPacket) Reset() {
	*x = TrackerWrapperPacket{}
	mi := &file_tracked_ssl_vision_wrapper_tracked_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackerWrapperPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerWrapperPacket) ProtoMessage() {}

func (x *TrackerWrapperPacket) ProtoReflect() protoreflect.Message {
	mi := &file_tracked_ssl_vision_wrapper_tracked_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerWrapperPacket.ProtoReflect.Descriptor instead.
func (*TrackerWrapperPacket) Descriptor() ([]byte, []int) {
	return file_tracked_ssl_vision_wrapper_tracked_proto_rawDescGZIP(), []int{0}
}

func (x *TrackerWrapperPacket) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *TrackerWrapperPacket) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *TrackerWrapperPacket) GetTrackedFrame() *TrackedFrame {
	if x != nil {
		return x.TrackedFrame
	}
	return nil
}

var File_tracked_ssl_vision_wrapper_tracked_proto protoreflect.FileDescriptor

const file_tracked_ssl_vision_wrapper_tracked_proto_rawDesc = "" +
	"\n" +
	"(tracked/ssl_vision_wrapper_tracked.proto\x1a*tracked/ssl_vision_detection_tracked.proto\"\x7f\n" +
	"\x14TrackerWrapperPacket\x12\x12\n" +
	"\x04uuid\x18\x01 \x02(\tR\x04uuid\x12\x1f\n" +
	"\vsource_name\x18\x02 \x01(\tR\n" +
	"sourceName\x122\n" +
	"\rtracked_frame\x18\x03 \x01(\v2\r.TrackedFrameR\ftrackedFrameBVB\x1cSslVisionWrapperTrackedProtoP\x01Z4github.com/RoboCup-SSL/ssl-go-tools/internal/tracked"

var (
	file_tracked_ssl_vision_wrapper_tracked_proto_rawDescOnce sync.Once
	file_tracked_ssl_vision_wrapper_tracked_proto_rawDescData []byte
)

func file_tracked_ssl_vision_wrapper_tracked_proto_rawDescGZIP() []byte {
	file_tracked_ssl_vision_wrapper_tracked_proto_rawDescOnce.Do(func() {
		file_tracked_ssl_vision_wrapper_tracked_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tracked_ssl_vision_wrapper_tracked_proto_rawDesc), len(file_tracked_ssl_vision_wrapper_tracked_proto_rawDesc)))
	})
	return file_tracked_ssl_vision_wrapper_tracked_proto_rawDescData
}

var file_tracked_ssl_vision_wrapper_tracked_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tracked_ssl_vision_wrapper_tracked_proto_goTypes = []any{
	(*TrackerWrapperPacket)(nil), // 0: TrackerWrapperPacket
	(*TrackedFrame)(nil),         // 1: TrackedFrame
}
var file_tracked_ssl_vision_wrapper_tracked_proto_depIdxs = []int32{
	1, // 0: TrackerWrapperPacket.tracked_frame:type_name -> TrackedFrame
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tracked_ssl_vision_wrapper_tracked_proto_init() }
func file_tracked_ssl_vision_wrapper_tracked_proto_init() {
	if File_tracked_ssl_vision_wrapper_tracked_proto != nil {
		return
	}
	file_tracked_ssl_vision_detection_tracked_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tracked_ssl_vision_wrapper_tracked_proto_rawDesc), len(file_tracked_ssl_vision_wrapper_tracked_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracked_ssl_vision_wrapper_tracked_proto_goTypes,
		DependencyIndexes: file_tracked_ssl_vision_wrapper_tracked_proto_depIdxs,
		MessageInfos:      file_tracked_ssl_vision_wrapper_tracked_proto_msgTypes,
	}.Build()
	File_tracked_ssl_vision_wrapper_tracked_proto = out.File
	file_tracked_ssl_vision_wrapper_tracked_proto_goTypes = nil
	file_tracked_ssl_vision_wrapper_tracked_proto_depIdxs = nil
}
