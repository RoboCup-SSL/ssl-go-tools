// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_vision_detection_tracked.proto

package sslproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The team color of the robot
type TeamColor int32

const (
	// team not set
	TeamColor_TEAM_COLOR_UNKNOWN TeamColor = 0
	// yellow team
	TeamColor_TEAM_COLOR_YELLOW TeamColor = 1
	// blue team
	TeamColor_TEAM_COLOR_BLUE TeamColor = 2
)

var TeamColor_name = map[int32]string{
	0: "TEAM_COLOR_UNKNOWN",
	1: "TEAM_COLOR_YELLOW",
	2: "TEAM_COLOR_BLUE",
}

var TeamColor_value = map[string]int32{
	"TEAM_COLOR_UNKNOWN": 0,
	"TEAM_COLOR_YELLOW":  1,
	"TEAM_COLOR_BLUE":    2,
}

func (x TeamColor) Enum() *TeamColor {
	p := new(TeamColor)
	*p = x
	return p
}

func (x TeamColor) String() string {
	return proto.EnumName(TeamColor_name, int32(x))
}

func (x *TeamColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TeamColor_value, data, "TeamColor")
	if err != nil {
		return err
	}
	*x = TeamColor(value)
	return nil
}

func (TeamColor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{0}
}

// Capabilities that a source implementation can have
type Capability int32

const (
	Capability_CAPABILITY_UNKNOWN               Capability = 0
	Capability_CAPABILITY_DETECT_FLYING_BALLS   Capability = 1
	Capability_CAPABILITY_DETECT_MULTIPLE_BALLS Capability = 2
	Capability_CAPABILITY_DETECT_KICKED_BALLS   Capability = 3
)

var Capability_name = map[int32]string{
	0: "CAPABILITY_UNKNOWN",
	1: "CAPABILITY_DETECT_FLYING_BALLS",
	2: "CAPABILITY_DETECT_MULTIPLE_BALLS",
	3: "CAPABILITY_DETECT_KICKED_BALLS",
}

var Capability_value = map[string]int32{
	"CAPABILITY_UNKNOWN":               0,
	"CAPABILITY_DETECT_FLYING_BALLS":   1,
	"CAPABILITY_DETECT_MULTIPLE_BALLS": 2,
	"CAPABILITY_DETECT_KICKED_BALLS":   3,
}

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return proto.EnumName(Capability_name, int32(x))
}

func (x *Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Capability_value, data, "Capability")
	if err != nil {
		return err
	}
	*x = Capability(value)
	return nil
}

func (Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{1}
}

// A vector with two dimensions
type Vector2 struct {
	X                    *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector2) Reset()         { *m = Vector2{} }
func (m *Vector2) String() string { return proto.CompactTextString(m) }
func (*Vector2) ProtoMessage()    {}
func (*Vector2) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{0}
}

func (m *Vector2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector2.Unmarshal(m, b)
}
func (m *Vector2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector2.Marshal(b, m, deterministic)
}
func (m *Vector2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector2.Merge(m, src)
}
func (m *Vector2) XXX_Size() int {
	return xxx_messageInfo_Vector2.Size(m)
}
func (m *Vector2) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector2.DiscardUnknown(m)
}

var xxx_messageInfo_Vector2 proto.InternalMessageInfo

func (m *Vector2) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Vector2) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

// A vector with three dimensions
type Vector3 struct {
	X                    *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z                    *float32 `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector3) Reset()         { *m = Vector3{} }
func (m *Vector3) String() string { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()    {}
func (*Vector3) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{1}
}

func (m *Vector3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector3.Unmarshal(m, b)
}
func (m *Vector3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector3.Marshal(b, m, deterministic)
}
func (m *Vector3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector3.Merge(m, src)
}
func (m *Vector3) XXX_Size() int {
	return xxx_messageInfo_Vector3.Size(m)
}
func (m *Vector3) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector3.DiscardUnknown(m)
}

var xxx_messageInfo_Vector3 proto.InternalMessageInfo

func (m *Vector3) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Vector3) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

// A unique robot id with team information
type RobotId struct {
	// The robot number
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// The team color
	TeamColor            *TeamColor `protobuf:"varint,2,req,name=team_color,json=teamColor,enum=TeamColor" json:"team_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RobotId) Reset()         { *m = RobotId{} }
func (m *RobotId) String() string { return proto.CompactTextString(m) }
func (*RobotId) ProtoMessage()    {}
func (*RobotId) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{2}
}

func (m *RobotId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotId.Unmarshal(m, b)
}
func (m *RobotId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotId.Marshal(b, m, deterministic)
}
func (m *RobotId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotId.Merge(m, src)
}
func (m *RobotId) XXX_Size() int {
	return xxx_messageInfo_RobotId.Size(m)
}
func (m *RobotId) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotId.DiscardUnknown(m)
}

var xxx_messageInfo_RobotId proto.InternalMessageInfo

func (m *RobotId) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RobotId) GetTeamColor() TeamColor {
	if m != nil && m.TeamColor != nil {
		return *m.TeamColor
	}
	return TeamColor_TEAM_COLOR_UNKNOWN
}

// A single tracked ball
type TrackedBall struct {
	// The position (x, y, height) [m] in the ssl-vision coordinate system
	Pos *Vector3 `protobuf:"bytes,1,req,name=pos" json:"pos,omitempty"`
	// The velocity [m/s] in the ssl-vision coordinate system
	Vel *Vector3 `protobuf:"bytes,2,opt,name=vel" json:"vel,omitempty"`
	// The visibility of the ball
	// A value between 0 (not visible) and 1 (visible)
	// The exact implementation depends on the source software
	Visibility           *float32 `protobuf:"fixed32,3,opt,name=visibility" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackedBall) Reset()         { *m = TrackedBall{} }
func (m *TrackedBall) String() string { return proto.CompactTextString(m) }
func (*TrackedBall) ProtoMessage()    {}
func (*TrackedBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{3}
}

func (m *TrackedBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackedBall.Unmarshal(m, b)
}
func (m *TrackedBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackedBall.Marshal(b, m, deterministic)
}
func (m *TrackedBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackedBall.Merge(m, src)
}
func (m *TrackedBall) XXX_Size() int {
	return xxx_messageInfo_TrackedBall.Size(m)
}
func (m *TrackedBall) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackedBall.DiscardUnknown(m)
}

var xxx_messageInfo_TrackedBall proto.InternalMessageInfo

func (m *TrackedBall) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *TrackedBall) GetVel() *Vector3 {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *TrackedBall) GetVisibility() float32 {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return 0
}

// A ball kicked by a robot, including predictions when the ball will come to a stop
type KickedBall struct {
	// The initial position [m] from which the ball was kicked
	Pos *Vector2 `protobuf:"bytes,1,req,name=pos" json:"pos,omitempty"`
	// The initial velocity [m/s] with which the ball was kicked
	Vel *Vector3 `protobuf:"bytes,2,req,name=vel" json:"vel,omitempty"`
	// The unix timestamp [s] when the kick was performed
	StartTimestamp *float64 `protobuf:"fixed64,3,req,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	// The predicted unix timestamp [s] when the ball comes to a stop
	StopTimestamp *float64 `protobuf:"fixed64,4,opt,name=stop_timestamp,json=stopTimestamp" json:"stop_timestamp,omitempty"`
	// The predicted position [m] at which the ball will come to a stop
	StopPos *Vector2 `protobuf:"bytes,5,opt,name=stop_pos,json=stopPos" json:"stop_pos,omitempty"`
	// The robot that kicked the ball
	RobotId              *RobotId `protobuf:"bytes,6,opt,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KickedBall) Reset()         { *m = KickedBall{} }
func (m *KickedBall) String() string { return proto.CompactTextString(m) }
func (*KickedBall) ProtoMessage()    {}
func (*KickedBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{4}
}

func (m *KickedBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KickedBall.Unmarshal(m, b)
}
func (m *KickedBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KickedBall.Marshal(b, m, deterministic)
}
func (m *KickedBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickedBall.Merge(m, src)
}
func (m *KickedBall) XXX_Size() int {
	return xxx_messageInfo_KickedBall.Size(m)
}
func (m *KickedBall) XXX_DiscardUnknown() {
	xxx_messageInfo_KickedBall.DiscardUnknown(m)
}

var xxx_messageInfo_KickedBall proto.InternalMessageInfo

func (m *KickedBall) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *KickedBall) GetVel() *Vector3 {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *KickedBall) GetStartTimestamp() float64 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *KickedBall) GetStopTimestamp() float64 {
	if m != nil && m.StopTimestamp != nil {
		return *m.StopTimestamp
	}
	return 0
}

func (m *KickedBall) GetStopPos() *Vector2 {
	if m != nil {
		return m.StopPos
	}
	return nil
}

func (m *KickedBall) GetRobotId() *RobotId {
	if m != nil {
		return m.RobotId
	}
	return nil
}

// A single tracked robot
type TrackedRobot struct {
	RobotId *RobotId `protobuf:"bytes,1,req,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	// The position [m] in the ssl-vision coordinate system
	Pos *Vector2 `protobuf:"bytes,2,req,name=pos" json:"pos,omitempty"`
	// The orientation [rad] in the ssl-vision coordinate system
	Orientation *float32 `protobuf:"fixed32,3,req,name=orientation" json:"orientation,omitempty"`
	// The velocity [m/s] in the ssl-vision coordinate system
	Vel *Vector2 `protobuf:"bytes,4,opt,name=vel" json:"vel,omitempty"`
	// The angular velocity [rad/s] in the ssl-vision coordinate system
	VelAngular *float32 `protobuf:"fixed32,5,opt,name=vel_angular,json=velAngular" json:"vel_angular,omitempty"`
	// The visibility of the robot
	// A value between 0 (not visible) and 1 (visible)
	// The exact implementation depends on the source software
	Visibility           *float32 `protobuf:"fixed32,6,opt,name=visibility" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackedRobot) Reset()         { *m = TrackedRobot{} }
func (m *TrackedRobot) String() string { return proto.CompactTextString(m) }
func (*TrackedRobot) ProtoMessage()    {}
func (*TrackedRobot) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{5}
}

func (m *TrackedRobot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackedRobot.Unmarshal(m, b)
}
func (m *TrackedRobot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackedRobot.Marshal(b, m, deterministic)
}
func (m *TrackedRobot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackedRobot.Merge(m, src)
}
func (m *TrackedRobot) XXX_Size() int {
	return xxx_messageInfo_TrackedRobot.Size(m)
}
func (m *TrackedRobot) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackedRobot.DiscardUnknown(m)
}

var xxx_messageInfo_TrackedRobot proto.InternalMessageInfo

func (m *TrackedRobot) GetRobotId() *RobotId {
	if m != nil {
		return m.RobotId
	}
	return nil
}

func (m *TrackedRobot) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *TrackedRobot) GetOrientation() float32 {
	if m != nil && m.Orientation != nil {
		return *m.Orientation
	}
	return 0
}

func (m *TrackedRobot) GetVel() *Vector2 {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *TrackedRobot) GetVelAngular() float32 {
	if m != nil && m.VelAngular != nil {
		return *m.VelAngular
	}
	return 0
}

func (m *TrackedRobot) GetVisibility() float32 {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return 0
}

// A frame that contains all currently tracked objects on the field on all cameras
type TrackedFrame struct {
	// A monotonous increasing frame counter
	FrameNumber *uint32 `protobuf:"varint,1,req,name=frame_number,json=frameNumber" json:"frame_number,omitempty"`
	// The unix timestamp in [s] of the data
	// If timestamp is larger than timestamp_captured, the source has applied a prediction already
	Timestamp *float64 `protobuf:"fixed64,2,req,name=timestamp" json:"timestamp,omitempty"`
	// The list of detected balls
	// The first ball is the primary one
	// Sources may add additional balls based on their capabilities
	Balls []*TrackedBall `protobuf:"bytes,3,rep,name=balls" json:"balls,omitempty"`
	// The list of detected robots of both teams
	Robots []*TrackedRobot `protobuf:"bytes,4,rep,name=robots" json:"robots,omitempty"`
	// Information about a kicked ball, if the ball was kicked by a robot and is still moving
	// Note: This field is optional. Some source implementations might not set this at any time
	KickedBall *KickedBall `protobuf:"bytes,5,opt,name=kicked_ball,json=kickedBall" json:"kicked_ball,omitempty"`
	// List of capabilities of the source implementation
	Capabilities         []Capability `protobuf:"varint,6,rep,name=capabilities,enum=Capability" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TrackedFrame) Reset()         { *m = TrackedFrame{} }
func (m *TrackedFrame) String() string { return proto.CompactTextString(m) }
func (*TrackedFrame) ProtoMessage()    {}
func (*TrackedFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_138fccacda9ed37d, []int{6}
}

func (m *TrackedFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackedFrame.Unmarshal(m, b)
}
func (m *TrackedFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackedFrame.Marshal(b, m, deterministic)
}
func (m *TrackedFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackedFrame.Merge(m, src)
}
func (m *TrackedFrame) XXX_Size() int {
	return xxx_messageInfo_TrackedFrame.Size(m)
}
func (m *TrackedFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackedFrame.DiscardUnknown(m)
}

var xxx_messageInfo_TrackedFrame proto.InternalMessageInfo

func (m *TrackedFrame) GetFrameNumber() uint32 {
	if m != nil && m.FrameNumber != nil {
		return *m.FrameNumber
	}
	return 0
}

func (m *TrackedFrame) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *TrackedFrame) GetBalls() []*TrackedBall {
	if m != nil {
		return m.Balls
	}
	return nil
}

func (m *TrackedFrame) GetRobots() []*TrackedRobot {
	if m != nil {
		return m.Robots
	}
	return nil
}

func (m *TrackedFrame) GetKickedBall() *KickedBall {
	if m != nil {
		return m.KickedBall
	}
	return nil
}

func (m *TrackedFrame) GetCapabilities() []Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func init() {
	proto.RegisterEnum("TeamColor", TeamColor_name, TeamColor_value)
	proto.RegisterEnum("Capability", Capability_name, Capability_value)
	proto.RegisterType((*Vector2)(nil), "Vector2")
	proto.RegisterType((*Vector3)(nil), "Vector3")
	proto.RegisterType((*RobotId)(nil), "RobotId")
	proto.RegisterType((*TrackedBall)(nil), "TrackedBall")
	proto.RegisterType((*KickedBall)(nil), "KickedBall")
	proto.RegisterType((*TrackedRobot)(nil), "TrackedRobot")
	proto.RegisterType((*TrackedFrame)(nil), "TrackedFrame")
}

func init() { proto.RegisterFile("ssl_vision_detection_tracked.proto", fileDescriptor_138fccacda9ed37d) }

var fileDescriptor_138fccacda9ed37d = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xc9, 0xd6, 0x6e, 0x27, 0x5d, 0x57, 0x8c, 0x40, 0x11, 0x42, 0x23, 0x04, 0x26, 0xca,
	0x84, 0x82, 0x94, 0x3d, 0x41, 0xdb, 0x65, 0xa8, 0x6a, 0xd6, 0x4e, 0x26, 0x63, 0xda, 0x55, 0xe4,
	0xb6, 0x06, 0x45, 0x4b, 0xeb, 0x2a, 0xf1, 0xaa, 0x75, 0x8f, 0xc1, 0x83, 0xf1, 0x08, 0xbc, 0x07,
	0x77, 0xc8, 0x4e, 0x42, 0xd2, 0x76, 0xda, 0x9d, 0xcf, 0x77, 0xbe, 0xf3, 0xf7, 0x9d, 0x63, 0xb0,
	0xd3, 0x34, 0x0e, 0x97, 0x51, 0x1a, 0xf1, 0x79, 0x38, 0x65, 0x82, 0x4d, 0x84, 0x7c, 0x89, 0x84,
	0x4e, 0x6e, 0xd9, 0xd4, 0x59, 0x24, 0x5c, 0x70, 0xfb, 0x18, 0xea, 0xdf, 0xd9, 0x44, 0xf0, 0xc4,
	0xc5, 0x0d, 0x40, 0xf7, 0x26, 0xb2, 0xb4, 0xb6, 0x46, 0xd0, 0xbd, 0xb4, 0x56, 0xa6, 0x96, 0x59,
	0x2b, 0xfb, 0xb4, 0xa0, 0x9d, 0x3e, 0x45, 0x93, 0xd6, 0x83, 0xa9, 0x67, 0xd6, 0x83, 0x7d, 0x06,
	0x75, 0xc2, 0xc7, 0x5c, 0xf4, 0xa7, 0xb8, 0x09, 0x5a, 0x34, 0x55, 0x51, 0x07, 0x44, 0x8b, 0xa6,
	0xf8, 0x13, 0x80, 0x60, 0x74, 0x16, 0x4e, 0x78, 0xcc, 0x13, 0x15, 0xdf, 0x74, 0xc1, 0x09, 0x18,
	0x9d, 0xf5, 0x24, 0x42, 0xf6, 0x45, 0xf1, 0xb4, 0x19, 0x18, 0x41, 0xd6, 0x72, 0x97, 0xc6, 0x31,
	0x7e, 0x0d, 0xfa, 0x82, 0xa7, 0x2a, 0x95, 0xe1, 0xee, 0x39, 0x79, 0x57, 0x44, 0x82, 0xd2, 0xb7,
	0x64, 0xb1, 0xa9, 0x59, 0x68, 0xdd, 0xb7, 0x64, 0x31, 0x3e, 0x02, 0x90, 0x52, 0x8c, 0xa3, 0x38,
	0x12, 0x2b, 0x53, 0xb7, 0x50, 0x5b, 0x23, 0x15, 0xc4, 0xfe, 0x83, 0x00, 0x06, 0xd1, 0xd3, 0x65,
	0xdc, 0x8d, 0x32, 0xda, 0x76, 0x99, 0x8f, 0x70, 0x98, 0x0a, 0x9a, 0x88, 0x50, 0x44, 0x33, 0x96,
	0x0a, 0x3a, 0x5b, 0x28, 0x3d, 0x10, 0x69, 0x2a, 0x38, 0x28, 0x50, 0x7c, 0x0c, 0xcd, 0x54, 0xf0,
	0x45, 0x85, 0xb7, 0x63, 0xa1, 0x36, 0x22, 0x07, 0x12, 0x2d, 0x69, 0xef, 0x61, 0x4f, 0xd1, 0x64,
	0x33, 0xbb, 0x6b, 0x73, 0xb9, 0xa4, 0x2e, 0x3d, 0x97, 0x3c, 0x95, 0xa4, 0x44, 0x0a, 0x1d, 0x46,
	0x53, 0xb3, 0x96, 0x93, 0x72, 0xe5, 0x49, 0x3d, 0xc9, 0x1e, 0xf6, 0x6f, 0x04, 0x8d, 0x5c, 0x48,
	0xe5, 0x5b, 0x8b, 0x2a, 0xe6, 0xdc, 0x8c, 0x2a, 0x74, 0xd0, 0x1e, 0xd3, 0xc1, 0x02, 0x83, 0x27,
	0x11, 0x9b, 0x0b, 0x2a, 0x0f, 0x2b, 0xdf, 0x7b, 0x15, 0x2a, 0x94, 0xda, 0xd9, 0x68, 0x5c, 0x29,
	0xf5, 0x16, 0x8c, 0x25, 0x8b, 0x43, 0x3a, 0xff, 0x79, 0x17, 0xd3, 0x44, 0x0d, 0x27, 0x37, 0xc2,
	0xe2, 0x4e, 0x86, 0x6c, 0x6c, 0xac, 0xb6, 0xb5, 0xb1, 0xbf, 0xe5, 0x40, 0xe7, 0x09, 0x9d, 0x31,
	0xfc, 0x0e, 0x1a, 0x3f, 0xe4, 0x23, 0x9c, 0xdf, 0xcd, 0xc6, 0x2c, 0xc9, 0xcf, 0xcd, 0x50, 0xd8,
	0x50, 0x41, 0xf8, 0x0d, 0xec, 0x97, 0x82, 0x6b, 0x6a, 0x31, 0x25, 0x80, 0x6d, 0xd8, 0x1d, 0xd3,
	0x38, 0x4e, 0x4d, 0xdd, 0xd2, 0xdb, 0x86, 0xdb, 0x70, 0x2a, 0x87, 0x47, 0x32, 0x17, 0x3e, 0x86,
	0x9a, 0xd2, 0x26, 0x35, 0x77, 0x14, 0xe9, 0xc0, 0xa9, 0x8a, 0x4a, 0x72, 0x27, 0xfe, 0x0c, 0xc6,
	0xad, 0xba, 0xa6, 0x50, 0x86, 0xe5, 0xab, 0x33, 0x9c, 0xf2, 0xc2, 0x08, 0xdc, 0x96, 0xd7, 0xf6,
	0x05, 0x1a, 0x13, 0xba, 0xa0, 0x6a, 0xb0, 0x88, 0xa5, 0x66, 0xcd, 0xd2, 0xdb, 0x4d, 0xd7, 0x70,
	0x7a, 0x05, 0xb8, 0x22, 0x6b, 0x84, 0x93, 0x11, 0xec, 0xff, 0xff, 0x2c, 0xf8, 0x15, 0xe0, 0xc0,
	0xeb, 0x5c, 0x84, 0xbd, 0x91, 0x3f, 0x22, 0xe1, 0xd5, 0x70, 0x30, 0x1c, 0x5d, 0x0f, 0x5b, 0xcf,
	0xf0, 0x4b, 0x78, 0x5e, 0xc1, 0x6f, 0x3c, 0xdf, 0x1f, 0x5d, 0xb7, 0x10, 0x7e, 0x01, 0x87, 0x15,
	0xb8, 0xeb, 0x5f, 0x79, 0x2d, 0xed, 0xe4, 0x17, 0x02, 0x28, 0xab, 0xc9, 0x94, 0xbd, 0xce, 0x65,
	0xa7, 0xdb, 0xf7, 0xfb, 0xc1, 0x4d, 0x25, 0xa5, 0x0d, 0x47, 0x15, 0xfc, 0xcc, 0x0b, 0xbc, 0x5e,
	0x10, 0x9e, 0xfb, 0x37, 0xfd, 0xe1, 0xd7, 0xb0, 0xdb, 0xf1, 0xfd, 0x6f, 0x2d, 0x84, 0x3f, 0x80,
	0xb5, 0xcd, 0xb9, 0xb8, 0xf2, 0x83, 0xfe, 0xa5, 0xef, 0xe5, 0x2c, 0xed, 0xf1, 0x4c, 0x83, 0x7e,
	0x6f, 0xe0, 0x9d, 0xe5, 0x1c, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x75, 0x70, 0x9e,
	0xc1, 0x04, 0x00, 0x00,
}
