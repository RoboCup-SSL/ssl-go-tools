// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_vision_wrapper_tracked.proto

package sslproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A wrapper packet containing meta data of the source
// Also serves for the possibility to extend the protocol later
type TrackerWrapperPacket struct {
	// A random UUID of the source that is kept constant at the source while running
	// If multiple sources are broadcasting to the same network, this id can be used to identify individual sources
	Uuid *string `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	// The name of the source software that is producing this messages.
	SourceName *string `protobuf:"bytes,2,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	// The tracked frame
	TrackedFrame         *TrackedFrame `protobuf:"bytes,3,opt,name=tracked_frame,json=trackedFrame" json:"tracked_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TrackerWrapperPacket) Reset()         { *m = TrackerWrapperPacket{} }
func (m *TrackerWrapperPacket) String() string { return proto.CompactTextString(m) }
func (*TrackerWrapperPacket) ProtoMessage()    {}
func (*TrackerWrapperPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e84f35cc8d505696, []int{0}
}

func (m *TrackerWrapperPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackerWrapperPacket.Unmarshal(m, b)
}
func (m *TrackerWrapperPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackerWrapperPacket.Marshal(b, m, deterministic)
}
func (m *TrackerWrapperPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackerWrapperPacket.Merge(m, src)
}
func (m *TrackerWrapperPacket) XXX_Size() int {
	return xxx_messageInfo_TrackerWrapperPacket.Size(m)
}
func (m *TrackerWrapperPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackerWrapperPacket.DiscardUnknown(m)
}

var xxx_messageInfo_TrackerWrapperPacket proto.InternalMessageInfo

func (m *TrackerWrapperPacket) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *TrackerWrapperPacket) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *TrackerWrapperPacket) GetTrackedFrame() *TrackedFrame {
	if m != nil {
		return m.TrackedFrame
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackerWrapperPacket)(nil), "TrackerWrapperPacket")
}

func init() { proto.RegisterFile("ssl_vision_wrapper_tracked.proto", fileDescriptor_e84f35cc8d505696) }

var fileDescriptor_e84f35cc8d505696 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x2e, 0xce, 0x89,
	0x2f, 0xcb, 0x2c, 0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x2f, 0x4a, 0x2c, 0x28, 0x48, 0x2d, 0x8a, 0x2f,
	0x29, 0x4a, 0x4c, 0xce, 0x4e, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x52, 0x42, 0x52,
	0x91, 0x92, 0x5a, 0x92, 0x9a, 0x5c, 0x02, 0x62, 0xa1, 0xa8, 0x51, 0xaa, 0xe7, 0x12, 0x09, 0x01,
	0x0b, 0x14, 0x85, 0x43, 0xcc, 0x08, 0x00, 0x71, 0x4a, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x4b, 0x33,
	0x53, 0x24, 0x18, 0x15, 0x98, 0x34, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x79, 0x2e, 0xee, 0xe2, 0xfc,
	0xd2, 0xa2, 0xe4, 0xd4, 0xf8, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x2e, 0x88, 0x90, 0x5f, 0x62, 0x6e, 0xaa, 0x90, 0x11, 0x17, 0x2f, 0xd4, 0xf4, 0xf8, 0xb4, 0x22,
	0x90, 0x12, 0x66, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x5e, 0x3d, 0x88, 0x15, 0x29, 0x6e, 0x20, 0xc1,
	0x20, 0x9e, 0x12, 0x24, 0x1e, 0x20, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x71, 0x9c, 0xae, 0xc7, 0x00,
	0x00, 0x00,
}
