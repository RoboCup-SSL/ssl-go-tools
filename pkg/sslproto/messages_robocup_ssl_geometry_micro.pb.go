// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages_robocup_ssl_geometry_micro.proto

package sslproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A 2D float vector.
type Micro_Vector2F struct {
	X                    *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Micro_Vector2F) Reset()         { *m = Micro_Vector2F{} }
func (m *Micro_Vector2F) String() string { return proto.CompactTextString(m) }
func (*Micro_Vector2F) ProtoMessage()    {}
func (*Micro_Vector2F) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{0}
}
func (m *Micro_Vector2F) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Micro_Vector2F.Unmarshal(m, b)
}
func (m *Micro_Vector2F) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Micro_Vector2F.Marshal(b, m, deterministic)
}
func (dst *Micro_Vector2F) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Micro_Vector2F.Merge(dst, src)
}
func (m *Micro_Vector2F) XXX_Size() int {
	return xxx_messageInfo_Micro_Vector2F.Size(m)
}
func (m *Micro_Vector2F) XXX_DiscardUnknown() {
	xxx_messageInfo_Micro_Vector2F.DiscardUnknown(m)
}

var xxx_messageInfo_Micro_Vector2F proto.InternalMessageInfo

func (m *Micro_Vector2F) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Micro_Vector2F) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

// Represents a field marking as a line segment represented by a start point p1,
// and end point p2, and a line thickness. The start and end points are along
// the center of the line, so the thickness of the line extends by thickness / 2
// on either side of the line.
type SSL_Micro_FieldLineSegment struct {
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Start point of the line segment.
	P1 *Micro_Vector2F `protobuf:"bytes,2,req,name=p1" json:"p1,omitempty"`
	// End point of the line segment.
	P2 *Micro_Vector2F `protobuf:"bytes,3,req,name=p2" json:"p2,omitempty"`
	// Thickness of the line segment.
	Thickness            *float32 `protobuf:"fixed32,4,opt,name=thickness" json:"thickness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_Micro_FieldLineSegment) Reset()         { *m = SSL_Micro_FieldLineSegment{} }
func (m *SSL_Micro_FieldLineSegment) String() string { return proto.CompactTextString(m) }
func (*SSL_Micro_FieldLineSegment) ProtoMessage()    {}
func (*SSL_Micro_FieldLineSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{1}
}
func (m *SSL_Micro_FieldLineSegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_Micro_FieldLineSegment.Unmarshal(m, b)
}
func (m *SSL_Micro_FieldLineSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_Micro_FieldLineSegment.Marshal(b, m, deterministic)
}
func (dst *SSL_Micro_FieldLineSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_Micro_FieldLineSegment.Merge(dst, src)
}
func (m *SSL_Micro_FieldLineSegment) XXX_Size() int {
	return xxx_messageInfo_SSL_Micro_FieldLineSegment.Size(m)
}
func (m *SSL_Micro_FieldLineSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_Micro_FieldLineSegment.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_Micro_FieldLineSegment proto.InternalMessageInfo

func (m *SSL_Micro_FieldLineSegment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSL_Micro_FieldLineSegment) GetP1() *Micro_Vector2F {
	if m != nil {
		return m.P1
	}
	return nil
}

func (m *SSL_Micro_FieldLineSegment) GetP2() *Micro_Vector2F {
	if m != nil {
		return m.P2
	}
	return nil
}

func (m *SSL_Micro_FieldLineSegment) GetThickness() float32 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return 0
}

// Represents a field marking as a circular arc segment represented by center point, a
// start angle, an end angle, and an arc thickness.
type SSL_Micro_FieldCicularArc struct {
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Center point of the circular arc.
	Center *Micro_Vector2F `protobuf:"bytes,2,req,name=center" json:"center,omitempty"`
	// Radius of the arc.
	Radius *float32 `protobuf:"fixed32,3,req,name=radius" json:"radius,omitempty"`
	// Start angle in counter-clockwise order.
	A1 *float32 `protobuf:"fixed32,4,opt,name=a1" json:"a1,omitempty"`
	// End angle in counter-clockwise order.
	A2 *float32 `protobuf:"fixed32,5,opt,name=a2" json:"a2,omitempty"`
	// Thickness of the arc.
	Thickness            *float32 `protobuf:"fixed32,6,opt,name=thickness" json:"thickness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_Micro_FieldCicularArc) Reset()         { *m = SSL_Micro_FieldCicularArc{} }
func (m *SSL_Micro_FieldCicularArc) String() string { return proto.CompactTextString(m) }
func (*SSL_Micro_FieldCicularArc) ProtoMessage()    {}
func (*SSL_Micro_FieldCicularArc) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{2}
}
func (m *SSL_Micro_FieldCicularArc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_Micro_FieldCicularArc.Unmarshal(m, b)
}
func (m *SSL_Micro_FieldCicularArc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_Micro_FieldCicularArc.Marshal(b, m, deterministic)
}
func (dst *SSL_Micro_FieldCicularArc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_Micro_FieldCicularArc.Merge(dst, src)
}
func (m *SSL_Micro_FieldCicularArc) XXX_Size() int {
	return xxx_messageInfo_SSL_Micro_FieldCicularArc.Size(m)
}
func (m *SSL_Micro_FieldCicularArc) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_Micro_FieldCicularArc.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_Micro_FieldCicularArc proto.InternalMessageInfo

func (m *SSL_Micro_FieldCicularArc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSL_Micro_FieldCicularArc) GetCenter() *Micro_Vector2F {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *SSL_Micro_FieldCicularArc) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *SSL_Micro_FieldCicularArc) GetA1() float32 {
	if m != nil && m.A1 != nil {
		return *m.A1
	}
	return 0
}

func (m *SSL_Micro_FieldCicularArc) GetA2() float32 {
	if m != nil && m.A2 != nil {
		return *m.A2
	}
	return 0
}

func (m *SSL_Micro_FieldCicularArc) GetThickness() float32 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return 0
}

type SSL_Micro_GeometryFieldSize struct {
	FieldLength          *int32                        `protobuf:"varint,1,opt,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	FieldWidth           *int32                        `protobuf:"varint,2,opt,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	GoalWidth            *int32                        `protobuf:"varint,3,opt,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	GoalDepth            *int32                        `protobuf:"varint,4,opt,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	BoundaryWidth        *int32                        `protobuf:"varint,5,opt,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	FieldLines           []*SSL_Micro_FieldLineSegment `protobuf:"bytes,6,rep,name=field_lines,json=fieldLines" json:"field_lines,omitempty"`
	FieldArcs            []*SSL_Micro_FieldCicularArc  `protobuf:"bytes,7,rep,name=field_arcs,json=fieldArcs" json:"field_arcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SSL_Micro_GeometryFieldSize) Reset()         { *m = SSL_Micro_GeometryFieldSize{} }
func (m *SSL_Micro_GeometryFieldSize) String() string { return proto.CompactTextString(m) }
func (*SSL_Micro_GeometryFieldSize) ProtoMessage()    {}
func (*SSL_Micro_GeometryFieldSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{3}
}
func (m *SSL_Micro_GeometryFieldSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_Micro_GeometryFieldSize.Unmarshal(m, b)
}
func (m *SSL_Micro_GeometryFieldSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_Micro_GeometryFieldSize.Marshal(b, m, deterministic)
}
func (dst *SSL_Micro_GeometryFieldSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_Micro_GeometryFieldSize.Merge(dst, src)
}
func (m *SSL_Micro_GeometryFieldSize) XXX_Size() int {
	return xxx_messageInfo_SSL_Micro_GeometryFieldSize.Size(m)
}
func (m *SSL_Micro_GeometryFieldSize) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_Micro_GeometryFieldSize.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_Micro_GeometryFieldSize proto.InternalMessageInfo

func (m *SSL_Micro_GeometryFieldSize) GetFieldLength() int32 {
	if m != nil && m.FieldLength != nil {
		return *m.FieldLength
	}
	return 0
}

func (m *SSL_Micro_GeometryFieldSize) GetFieldWidth() int32 {
	if m != nil && m.FieldWidth != nil {
		return *m.FieldWidth
	}
	return 0
}

func (m *SSL_Micro_GeometryFieldSize) GetGoalWidth() int32 {
	if m != nil && m.GoalWidth != nil {
		return *m.GoalWidth
	}
	return 0
}

func (m *SSL_Micro_GeometryFieldSize) GetGoalDepth() int32 {
	if m != nil && m.GoalDepth != nil {
		return *m.GoalDepth
	}
	return 0
}

func (m *SSL_Micro_GeometryFieldSize) GetBoundaryWidth() int32 {
	if m != nil && m.BoundaryWidth != nil {
		return *m.BoundaryWidth
	}
	return 0
}

func (m *SSL_Micro_GeometryFieldSize) GetFieldLines() []*SSL_Micro_FieldLineSegment {
	if m != nil {
		return m.FieldLines
	}
	return nil
}

func (m *SSL_Micro_GeometryFieldSize) GetFieldArcs() []*SSL_Micro_FieldCicularArc {
	if m != nil {
		return m.FieldArcs
	}
	return nil
}

type SSL_Micro_GeometryCameraCalibration struct {
	CameraId             *uint32  `protobuf:"varint,1,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	FocalLength          *float32 `protobuf:"fixed32,2,opt,name=focal_length,json=focalLength" json:"focal_length,omitempty"`
	PrincipalPointX      *float32 `protobuf:"fixed32,3,opt,name=principal_point_x,json=principalPointX" json:"principal_point_x,omitempty"`
	PrincipalPointY      *float32 `protobuf:"fixed32,4,opt,name=principal_point_y,json=principalPointY" json:"principal_point_y,omitempty"`
	Distortion           *float32 `protobuf:"fixed32,5,opt,name=distortion" json:"distortion,omitempty"`
	Q0                   *float32 `protobuf:"fixed32,6,opt,name=q0" json:"q0,omitempty"`
	Q1                   *float32 `protobuf:"fixed32,7,opt,name=q1" json:"q1,omitempty"`
	Q2                   *float32 `protobuf:"fixed32,8,opt,name=q2" json:"q2,omitempty"`
	Q3                   *float32 `protobuf:"fixed32,9,opt,name=q3" json:"q3,omitempty"`
	Tx                   *float32 `protobuf:"fixed32,10,opt,name=tx" json:"tx,omitempty"`
	Ty                   *float32 `protobuf:"fixed32,11,opt,name=ty" json:"ty,omitempty"`
	Tz                   *float32 `protobuf:"fixed32,12,opt,name=tz" json:"tz,omitempty"`
	DerivedCameraWorldTx *float32 `protobuf:"fixed32,13,opt,name=derived_camera_world_tx,json=derivedCameraWorldTx" json:"derived_camera_world_tx,omitempty"`
	DerivedCameraWorldTy *float32 `protobuf:"fixed32,14,opt,name=derived_camera_world_ty,json=derivedCameraWorldTy" json:"derived_camera_world_ty,omitempty"`
	DerivedCameraWorldTz *float32 `protobuf:"fixed32,15,opt,name=derived_camera_world_tz,json=derivedCameraWorldTz" json:"derived_camera_world_tz,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_Micro_GeometryCameraCalibration) Reset()         { *m = SSL_Micro_GeometryCameraCalibration{} }
func (m *SSL_Micro_GeometryCameraCalibration) String() string { return proto.CompactTextString(m) }
func (*SSL_Micro_GeometryCameraCalibration) ProtoMessage()    {}
func (*SSL_Micro_GeometryCameraCalibration) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{4}
}
func (m *SSL_Micro_GeometryCameraCalibration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_Micro_GeometryCameraCalibration.Unmarshal(m, b)
}
func (m *SSL_Micro_GeometryCameraCalibration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_Micro_GeometryCameraCalibration.Marshal(b, m, deterministic)
}
func (dst *SSL_Micro_GeometryCameraCalibration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_Micro_GeometryCameraCalibration.Merge(dst, src)
}
func (m *SSL_Micro_GeometryCameraCalibration) XXX_Size() int {
	return xxx_messageInfo_SSL_Micro_GeometryCameraCalibration.Size(m)
}
func (m *SSL_Micro_GeometryCameraCalibration) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_Micro_GeometryCameraCalibration.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_Micro_GeometryCameraCalibration proto.InternalMessageInfo

func (m *SSL_Micro_GeometryCameraCalibration) GetCameraId() uint32 {
	if m != nil && m.CameraId != nil {
		return *m.CameraId
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetFocalLength() float32 {
	if m != nil && m.FocalLength != nil {
		return *m.FocalLength
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetPrincipalPointX() float32 {
	if m != nil && m.PrincipalPointX != nil {
		return *m.PrincipalPointX
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetPrincipalPointY() float32 {
	if m != nil && m.PrincipalPointY != nil {
		return *m.PrincipalPointY
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetDistortion() float32 {
	if m != nil && m.Distortion != nil {
		return *m.Distortion
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetQ0() float32 {
	if m != nil && m.Q0 != nil {
		return *m.Q0
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetQ1() float32 {
	if m != nil && m.Q1 != nil {
		return *m.Q1
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetQ2() float32 {
	if m != nil && m.Q2 != nil {
		return *m.Q2
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetQ3() float32 {
	if m != nil && m.Q3 != nil {
		return *m.Q3
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetTx() float32 {
	if m != nil && m.Tx != nil {
		return *m.Tx
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetTy() float32 {
	if m != nil && m.Ty != nil {
		return *m.Ty
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetTz() float32 {
	if m != nil && m.Tz != nil {
		return *m.Tz
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetDerivedCameraWorldTx() float32 {
	if m != nil && m.DerivedCameraWorldTx != nil {
		return *m.DerivedCameraWorldTx
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetDerivedCameraWorldTy() float32 {
	if m != nil && m.DerivedCameraWorldTy != nil {
		return *m.DerivedCameraWorldTy
	}
	return 0
}

func (m *SSL_Micro_GeometryCameraCalibration) GetDerivedCameraWorldTz() float32 {
	if m != nil && m.DerivedCameraWorldTz != nil {
		return *m.DerivedCameraWorldTz
	}
	return 0
}

type SSL_Micro_GeometryData struct {
	Field                *SSL_Micro_GeometryFieldSize           `protobuf:"bytes,1,req,name=field" json:"field,omitempty"`
	Calib                []*SSL_Micro_GeometryCameraCalibration `protobuf:"bytes,2,rep,name=calib" json:"calib,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *SSL_Micro_GeometryData) Reset()         { *m = SSL_Micro_GeometryData{} }
func (m *SSL_Micro_GeometryData) String() string { return proto.CompactTextString(m) }
func (*SSL_Micro_GeometryData) ProtoMessage()    {}
func (*SSL_Micro_GeometryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26, []int{5}
}
func (m *SSL_Micro_GeometryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_Micro_GeometryData.Unmarshal(m, b)
}
func (m *SSL_Micro_GeometryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_Micro_GeometryData.Marshal(b, m, deterministic)
}
func (dst *SSL_Micro_GeometryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_Micro_GeometryData.Merge(dst, src)
}
func (m *SSL_Micro_GeometryData) XXX_Size() int {
	return xxx_messageInfo_SSL_Micro_GeometryData.Size(m)
}
func (m *SSL_Micro_GeometryData) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_Micro_GeometryData.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_Micro_GeometryData proto.InternalMessageInfo

func (m *SSL_Micro_GeometryData) GetField() *SSL_Micro_GeometryFieldSize {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *SSL_Micro_GeometryData) GetCalib() []*SSL_Micro_GeometryCameraCalibration {
	if m != nil {
		return m.Calib
	}
	return nil
}

func init() {
	proto.RegisterType((*Micro_Vector2F)(nil), "Micro_Vector2f")
	proto.RegisterType((*SSL_Micro_FieldLineSegment)(nil), "SSL_Micro_FieldLineSegment")
	proto.RegisterType((*SSL_Micro_FieldCicularArc)(nil), "SSL_Micro_FieldCicularArc")
	proto.RegisterType((*SSL_Micro_GeometryFieldSize)(nil), "SSL_Micro_GeometryFieldSize")
	proto.RegisterType((*SSL_Micro_GeometryCameraCalibration)(nil), "SSL_Micro_GeometryCameraCalibration")
	proto.RegisterType((*SSL_Micro_GeometryData)(nil), "SSL_Micro_GeometryData")
}

func init() {
	proto.RegisterFile("messages_robocup_ssl_geometry_micro.proto", fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26)
}

var fileDescriptor_messages_robocup_ssl_geometry_micro_220007d6100f9d26 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xd1, 0x4e, 0x13, 0x4f,
	0x14, 0xc6, 0xb3, 0x53, 0x0a, 0xf4, 0x14, 0x4a, 0xfe, 0x93, 0x7f, 0x70, 0x04, 0x14, 0xac, 0x1a,
	0xab, 0x31, 0x0d, 0x5d, 0xe2, 0x85, 0xc6, 0x1b, 0x02, 0xd1, 0x98, 0x60, 0x62, 0xb6, 0x46, 0xf4,
	0x6a, 0x33, 0xec, 0x0e, 0xed, 0xc4, 0xed, 0xce, 0x32, 0x3b, 0x95, 0xdd, 0x3e, 0x81, 0x97, 0x3e,
	0x89, 0xaf, 0xe0, 0x3b, 0xf9, 0x04, 0x66, 0xce, 0x0e, 0x22, 0x85, 0x35, 0xde, 0xf1, 0xfb, 0xce,
	0x39, 0xc3, 0xb7, 0xe7, 0x7c, 0x85, 0xc7, 0x13, 0x91, 0xe7, 0x7c, 0x24, 0xf2, 0x50, 0xab, 0x13,
	0x15, 0x4d, 0xb3, 0x30, 0xcf, 0x93, 0x70, 0x24, 0xd4, 0x44, 0x18, 0x5d, 0x86, 0x13, 0x19, 0x69,
	0xd5, 0xcf, 0xb4, 0x32, 0xaa, 0xfb, 0x14, 0x3a, 0x6f, 0x2d, 0x86, 0x1f, 0x44, 0x64, 0x94, 0xf6,
	0x4f, 0xe9, 0x0a, 0x78, 0x05, 0xf3, 0x76, 0x48, 0x8f, 0x04, 0x5e, 0x61, 0xa9, 0x64, 0xa4, 0xa2,
	0xb2, 0xfb, 0xcd, 0x83, 0x8d, 0xe1, 0xf0, 0x28, 0xac, 0x46, 0x5e, 0x49, 0x91, 0xc4, 0x47, 0x32,
	0x15, 0x43, 0x31, 0x9a, 0x88, 0xd4, 0x50, 0x0a, 0x0b, 0x29, 0x9f, 0x08, 0xe6, 0xed, 0x78, 0xbd,
	0x56, 0x80, 0x7f, 0xd3, 0x6d, 0x20, 0xd9, 0x00, 0x5f, 0x68, 0xfb, 0x6b, 0xfd, 0xab, 0xff, 0x2b,
	0x20, 0xd9, 0x00, 0x1b, 0x7c, 0xd6, 0xa8, 0x6b, 0xf0, 0xe9, 0x16, 0xb4, 0xcc, 0x58, 0x46, 0x9f,
	0x53, 0x91, 0xe7, 0x6c, 0x61, 0xc7, 0xeb, 0x91, 0xe0, 0x52, 0xe8, 0x7e, 0xf7, 0xe0, 0xf6, 0x9c,
	0xa5, 0x03, 0x19, 0x4d, 0x13, 0xae, 0xf7, 0x75, 0x74, 0xa3, 0xa3, 0x47, 0xb0, 0x18, 0x89, 0xd4,
	0x08, 0x5d, 0xe7, 0xca, 0x95, 0xe9, 0x3a, 0x2c, 0x6a, 0x1e, 0xcb, 0x69, 0x8e, 0xee, 0x48, 0xe0,
	0x88, 0x76, 0x80, 0xf0, 0x81, 0x73, 0x42, 0xf8, 0x00, 0xd9, 0x67, 0x4d, 0xc7, 0x73, 0x86, 0x17,
	0xe7, 0x0d, 0xff, 0x20, 0xb0, 0x79, 0x69, 0xf8, 0xb5, 0x3b, 0x0a, 0x1a, 0x1f, 0xca, 0x99, 0xa0,
	0xf7, 0x60, 0xe5, 0xd4, 0x42, 0x98, 0x88, 0x74, 0x64, 0xc6, 0x68, 0xbd, 0x19, 0xb4, 0x51, 0x3b,
	0x42, 0x89, 0x6e, 0x43, 0x85, 0xe1, 0xb9, 0x8c, 0xcd, 0x98, 0x11, 0xec, 0x00, 0x94, 0x8e, 0xad,
	0x42, 0xef, 0x00, 0x8c, 0x14, 0x4f, 0x5c, 0xbd, 0x81, 0xf5, 0x96, 0x55, 0xae, 0x96, 0x63, 0x91,
	0x99, 0x31, 0x7e, 0x88, 0x2b, 0x1f, 0x5a, 0x81, 0x3e, 0x84, 0xce, 0x89, 0x9a, 0xa6, 0x31, 0xd7,
	0xa5, 0x7b, 0xa1, 0x89, 0x2d, 0xab, 0x17, 0x6a, 0xf5, 0xca, 0xcb, 0x0b, 0x17, 0x89, 0x4c, 0x85,
	0xfd, 0xd0, 0x46, 0xaf, 0xed, 0x6f, 0xf6, 0xeb, 0xf3, 0xe1, 0x2c, 0x5a, 0x25, 0xa7, 0xcf, 0xa1,
	0xa2, 0x90, 0xeb, 0x28, 0x67, 0x4b, 0x38, 0xbc, 0xd1, 0xaf, 0xbd, 0x64, 0xd0, 0xc2, 0xee, 0x7d,
	0x1d, 0xe5, 0xdd, 0x9f, 0x0d, 0xb8, 0x7f, 0x7d, 0x83, 0x07, 0x7c, 0x22, 0x34, 0x3f, 0xe0, 0x89,
	0x3c, 0xd1, 0xdc, 0x48, 0x95, 0xd2, 0x4d, 0x68, 0x45, 0x28, 0x86, 0x32, 0xc6, 0x44, 0xaf, 0x06,
	0xcb, 0x95, 0xf0, 0x26, 0xc6, 0x35, 0xab, 0x88, 0x27, 0x17, 0x6b, 0x26, 0x78, 0xa7, 0x36, 0x6a,
	0x6e, 0xcd, 0x4f, 0xe0, 0xbf, 0x4c, 0xcb, 0x34, 0x92, 0x19, 0x4f, 0xc2, 0x4c, 0xc9, 0xd4, 0x84,
	0x05, 0x2e, 0x93, 0x04, 0x6b, 0xbf, 0x0b, 0xef, 0xac, 0xfe, 0xf1, 0xa6, 0xde, 0xd2, 0x45, 0x64,
	0xae, 0xf7, 0x13, 0xbd, 0x0b, 0x10, 0xcb, 0xdc, 0x28, 0x6d, 0x5d, 0xba, 0xdc, 0xfc, 0xa1, 0xd8,
	0x3c, 0x9d, 0xed, 0xba, 0xe0, 0x90, 0xb3, 0x5d, 0xe4, 0x01, 0x5b, 0x72, 0x8c, 0x79, 0x3b, 0xf3,
	0xd9, 0xb2, 0x63, 0x1f, 0x79, 0x8f, 0xb5, 0x1c, 0xef, 0x59, 0x36, 0x05, 0x83, 0x8a, 0x4d, 0x81,
	0x5c, 0xb2, 0xb6, 0xe3, 0x12, 0x79, 0xc6, 0x56, 0x1c, 0xcf, 0xe8, 0x33, 0xb8, 0x15, 0x0b, 0x2d,
	0xbf, 0x88, 0x38, 0x74, 0xfb, 0x3a, 0x57, 0x3a, 0x89, 0x43, 0x53, 0xb0, 0x55, 0x6c, 0xfa, 0xdf,
	0x95, 0xab, 0x15, 0x1f, 0xdb, 0xe2, 0xfb, 0xa2, 0x7e, 0xac, 0x64, 0x9d, 0xda, 0xb1, 0xb2, 0x7e,
	0x6c, 0xc6, 0xd6, 0x6a, 0xc7, 0x66, 0xdd, 0xaf, 0x1e, 0xac, 0x5f, 0x3f, 0xfa, 0x21, 0x37, 0x9c,
	0xfa, 0xd0, 0xc4, 0x70, 0xe0, 0x8d, 0xdb, 0xfe, 0x56, 0xff, 0x2f, 0x3f, 0xaf, 0xa0, 0x6a, 0xa5,
	0x2f, 0xa0, 0x19, 0xd9, 0xa8, 0x30, 0x82, 0xc9, 0x7b, 0xd0, 0xff, 0x87, 0x40, 0x05, 0xd5, 0xc8,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x35, 0xf3, 0x03, 0x5f, 0x05, 0x00, 0x00,
}
